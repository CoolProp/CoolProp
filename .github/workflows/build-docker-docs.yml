name: Doxygen and Sphinx documentation

on:
  workflow_dispatch:
    # inputs:
    #   expensive:
    #     description: 'Build expensive docs'
    #     required: false
    #     type: boolean
  push:
    branches: [ master, develop, actions_docs ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  #pull_request:
  #  branches: [ master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    container:
      image: ghcr.io/coolprop/coolprop_docs_02_builder:dev
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Build and install wheel using bdist_wheel
        working-directory: ./wrappers/Python/
        shell: bash
        run: |
          source activate docs
          python setup.py bdist_wheel --dist-dir dist cmake=default,64
          pip install -vvv --force-reinstall --ignore-installed --upgrade --no-index `ls dist/*.whl`
          
      - name: Test the installed CoolProp version
        shell: bash
        run: |
          source activate docs
          python -c "import CoolProp; print(CoolProp.__gitrevision__)"
          python -c "import CoolProp; print(CoolProp.__file__)"
          
      - name: Build homepage and create graphs
        # Use a single argument with "True" or "1" to trigger a full rebuild
        working-directory: ./Web/scripts/
        shell: bash
        run: |
          source activate docs
          python -u __init__.py True
          
      - name: Build documentation with Doxygen
        shell: bash
        run: |
          source activate docs
          doxygen --version
          doxygen Doxyfile
          
      - name: Build documentation with Sphinx
        working-directory: ./Web
        shell: bash
        run: |
          source activate docs
          sphinx-apidoc -T -f -e -o apidoc ../wrappers/Python/CoolProp
          make html
          
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./Web/_build/
          
      - name: Extract CoolProp version from CMakeLists.txt
        shell: bash
        run: |
          set -x
          COOLPROP_VERSION=$(python dev/extract_version.py --cmake-only)
          echo COOLPROP_VERSION=$COOLPROP_VERSION >> $GITHUB_ENV
      
      - name: Zip the HTML documentation
        working-directory: ./Web/_build/
        shell: bash
        run: |
          tar -cvzf CoolProp-${{ env.COOLPROP_VERSION }}-documentation-html.tar.gz html/*
      
      - name: Archive TGZ or ZIP artifacts
        uses: actions/upload-artifact@v2
        with:
            name: CoolProp-${{ env.COOLPROP_VERSION }}-documentation-html.tar.gz
            path: Web/_build/CoolProp-${{ env.COOLPROP_VERSION }}-documentation-html.tar.gz
      
      - name: Upload TGZ or ZIP to release
        if: contains(github.ref, 'refs/tags')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: Web/_build/CoolProp-${{ env.COOLPROP_VERSION }}-documentation-html.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: false

  # Deploy job
  deploy:
    # Add a dependency to the build job
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        #if: contains(github.ref, 'refs/tags')
        id: deployment
        uses: actions/deploy-pages@v1