name: BuildSharedLibrary

on:
  push:
    branches: [ master, develop, actions_shared ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ master, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
        include:
        - os: windows-latest
          nproc: 2
        - os: ubuntu-latest
          nproc: 2
        - os: macOS-latest
          nproc: 3


    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Create Build Environment
      shell: bash
      run: |
        mkdir build

    - name: Configure CMake
      working-directory: ./build
      shell: bash
      run: cmake -DCMAKE_BUILD_TYPE:STRING=$BUILD_TYPE -DCOOLPROP_SHARED_LIBRARY:BOOL=ON ..

    - name: Build
      working-directory: ./build
      shell: bash
      run: |
        cmake --build . --target install -j $(nproc) --config $BUILD_TYPE

    # TODO: enable testing. -DBUILD_TESTING:BOOL=ON does nothing unless you have Csharp. There is an undocumentated -DCOOLPROP_CATCH_MODULE:BOOL=ON but that fails to build
    #- name: Test
    #  working-directory: ${{runner.workspace}}/build
    #  shell: bash
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C $BUILD_TYPE


    - name: Extract OSApp version from CMakeLists.txt
      shell: python
      run: |
        import re
        from pathlib import Path

        with open('CMakeLists.txt', 'r') as f:
            content = f.read()

        no_comments_lines = []
        for line in content.splitlines():
            l = line.strip().split('#')[0]
            if l:
                no_comments_lines.append(l)
        content = "\n".join(no_comments_lines)

        m_major = re.search(r'set\s*\(COOLPROP_VERSION_MAJOR (\d+)\)', content)
        m_minor = re.search(r'set\s*\(COOLPROP_VERSION_MINOR (\d+)\)', content)
        m_patch = re.search(r'set\s*\(COOLPROP_VERSION_PATCH (\d+)\)', content)
        m_rev = re.search(r'set\s*\(COOLPROP_VERSION_REVISION "*(.*?)"*\)', content)

        coolprop_version = ''
        if m_major:
            COOLPROP_VERSION_MAJOR = m_major.groups()[0]
            coolprop_version += COOLPROP_VERSION_MAJOR


        if m_minor:
            COOLPROP_VERSION_MINOR = m_minor.groups()[0]
            coolprop_version += "." + COOLPROP_VERSION_MINOR

        if m_patch:
            COOLPROP_VERSION_PATCH = m_patch.groups()[0]
            coolprop_version += "." + COOLPROP_VERSION_PATCH

        if m_rev:
            COOLPROP_VERSION_REV = m_rev.groups()[0]
            coolprop_version += "-" + COOLPROP_VERSION_REV

        with open(os.environ['GITHUB_ENV'], 'a') as f:
            f.write(f"\COOLPROP_VERSION={coolprop_version}")
        print(f"{coolprop_version=}")

    - name: Tar.gz the shared library to maintain case sensitivy and file permissions
      working-directory: ./install_root/shared_library/
      shell: bash
      run: |
        tar -cvzf CoolProp-${{ env.COOLPROP_VERSION }}-shared-${{ matrix.os }}.tar.gz ./*

    - name: Archive TGZ or ZIP artifacts
      uses: actions/upload-artifact@v2
      with:
          name: CoolProp-${{ env.COOLPROP_VERSION }}-shared-${{ matrix.os }}.tar.gz
          path: install_root/shared_library/CoolProp-${{ env.COOLPROP_VERSION }}-shared-${{ matrix.os }}.tar.gz

    - name: Upload TGZ or ZIP to release
      if: contains(github.ref, 'refs/tags')
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: install_root/shared_library/CoolProp-${{ env.COOLPROP_VERSION }}-shared-${{ matrix.os }}.tar.gz
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: false
